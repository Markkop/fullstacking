type Event {
  """The ID of an object"""
  id: ID!
  _id: String
  title: String
  date: String
  description: String
  author: User
}

input EventAddSubscriptionInput {
  clientSubscriptionId: String
}

type EventAddSubscriptionPayload {
  subscription: Event
  clientSubscriptionId: String
}

input EventCreateInput {
  title: String!
  date: String!
  description: String!
  clientMutationId: String
}

type EventCreatePayload {
  id: ID
  clientMutationId: String
}

type Mutation {
  EventCreate(input: EventCreateInput!): EventCreatePayload
  UserCreate(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  UserLogin(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
}

"""The root of all... queries"""
type Query {
  event(id: ID!): Event
  events: [Event]
  users(id: ID!): User
}

type Subscription {
  EventAddSubscription(input: EventAddSubscriptionInput!): EventAddSubscriptionPayload
}

type User {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}
